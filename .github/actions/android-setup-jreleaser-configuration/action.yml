#
# Copyright 2025 Adobe. All rights reserved.
# This file is licensed to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
# OF ANY KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#

name: Generate JReleaser YAML
description: Write jreleaser.yml with the provided staging directory injected into both deployers.

inputs:
  staging-dir:
    description: |
      The path (workspace relative or absolute) to the artifact staging directory that JReleaser should upload.
      Ex: "code/assurance/build/staging-deploy"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Generate jreleaser.yml
      shell: bash
      run: |
        cat > jreleaser.yml <<YAML
        release:
          github:
            # Set just to pass validation
            token: "NOT_A_REAL_TOKEN"
            # Prevent JReleaser from creating a GitHub release
            skipRelease: true
            # Prevent JReleaser from creating and pushing git tags
            skipTag: true

        signing:
          # Controls which "mode" this configuration is allowed to be applied to (ex: SNAPSHOT, RELEASE)
          # ALWAYS allows it to apply for both cases
          active: ALWAYS
          # COMMAND mode means that `gpg` is used to sign the artifacts.
          mode: COMMAND
          armored: true
          # Skip verifying the signature of the artifacts using the public key (since we don't provide it).
          verify: false
          command:
            executable: gpg
          # Note: KEY_ID and PASSPHRASE are set in the environment variables by the workflow

        deploy:
          maven:
            # Note: this deployer cannot be used for SNAPSHOTs
            mavenCentral:
              sonatype:
                # Note: `username` and `password`/`token` are set in the environment variables by the workflow

                active: RELEASE
                # Only do up to the UPLOAD step (UPLOAD, PUBLISH, or FULL) so we can use
                # the Maven Central UI to do the final publishing
                #
                # * UPLOAD
                #   - JReleaser zips the staging-deploy directory, calls /upload, waits until
                #     the deployment becomes VALIDATED, then stops.
                #   - JReleaser provides the deploymentId if needed in future steps. We currently
                #     do not use this in the workflow.
                #   - You can run the publish step manually (UI) or via stage=PUBLISH.
                #
                # * PUBLISH
                #   - JReleaser skips the upload.
                #   - You must pass the previously obtained deploymentId
                #     (deploy.maven.mavenCentral.<name>.deploymentId property or env-var).
                #   - JReleaser fetches the deployment's status and, if it is VALIDATED,
                #     calls /deployment/{id} to publish.
                #
                # * FULL (default)
                #   - JReleaser performs both steps back-to-back:
                #     upload -> wait for validation -> publish.
                stage: UPLOAD          # stop after the upload/validation step
                url: https://central.sonatype.com/api/v1/publisher
                # The Maven Central deployer will use bearer for upload authentication regardless
                # The BASIC authorization works around JReleaser's logic to only import the password
                # when using BEARER mode
                authorization: BASIC

                #Signs using the `signing` configuration above
                sign: true

                checksums: true
                sourceJar: true
                javadocJar: true
                # Skip, since pom validation always fails for `<packaging>aar</packaging>`
                verifyPom: false

                # Where to find the artifact files
                stagingRepositories:
                  - ${{ inputs.staging-dir }}

            nexus2:
              sonatypeSnapshots:
                active: SNAPSHOT
                # Set just to pass validation - deployer actually uses snapshotUrl when in SNAPSHOT mode
                url: https://central.sonatype.com/repository/maven-snapshots/
                snapshotUrl: https://central.sonatype.com/repository/maven-snapshots/
                authorization: BASIC
                sign: true
                checksums: true
                sourceJar:  true
                javadocJar: true
                verifyPom:  false
                snapshotSupported: true
                # Auto close and release the SNAPSHOT after the upload step
                closeRepository: true
                releaseRepository: true
                stagingRepositories:
                  - ${{ inputs.staging-dir }}
        YAML