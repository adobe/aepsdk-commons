#
# Copyright 2024 Adobe. All rights reserved.
# This file is licensed to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
# OF ANY KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#

name: Publish Snapshot (Android)

# This workflow relies on the following secrets:
# - GPG_SECRET_KEYS
# - GPG_OWNERTRUST
# - CENTRAL_SONATYPE_USERNAME
# - CENTRAL_SONATYPE_TOKEN
# These can be passed using the `secrets: inherit` option in the caller workflow file.

on:
  workflow_call:
    inputs:
      release-variant:
        description: | 
          The variant used to control the Maven publish command (ex: core -> make core-publish-snapshot). 
          If not specified, uses the default command.
        required: false
        type: string
        default: ''

      ref:
        description: |
          The git reference (branch, tag, or SHA) to check out when publishing the snapshot.
          Defaults to 'main'.
        required: false
        type: string
        default: 'main'

jobs:
  publish:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.ref }}
      
      - name: Set up Java
        uses: actions/setup-java@v4.7.0
        with:
          distribution: 'zulu'
          java-version: 17
      
      - name: Cache Gradle packages
        uses: actions/cache@v4.2.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      
      - name: Import GPG key
        env:
          GPG_SECRET_KEYS: ${{ secrets.GPG_SECRET_KEYS }}
          GPG_OWNERTRUST: ${{ secrets.GPG_OWNERTRUST }}
        run: |
          echo $GPG_SECRET_KEYS | base64 --decode | gpg --import --no-tty --batch --yes
          echo $GPG_OWNERTRUST | base64 --decode | gpg --import-ownertrust --no-tty --batch --yes
      
      - name: Publish to Maven Snapshot Repository
        run: |
          if [ -n "${{ inputs.release-variant }}" ]; then
            make "${{ inputs.release-variant }}-publish-snapshot"
          else
            make ci-publish-staging
          fi

      # - name: Write JReleaser user-level properties
      #   run: |
      #     # Ensure ~/.jreleaser exists
      #     mkdir -p "$HOME/.jreleaser"
      
      #     # Write the properties file
      #     cat <<'EOF' > "$HOME/.jreleaser/config.properties"
      #     JRELEASER_NEXUS2_SONATYPESNAPSHOTS_USERNAME=${{ secrets.CENTRAL_SONATYPE_USERNAME }}
      #     JRELEASER_NEXUS2_USERNAME=${{ secrets.CENTRAL_SONATYPE_USERNAME }}
      #     deploy.maven.nexus2.sonatypeSnapshots.username=${{ secrets.CENTRAL_SONATYPE_USERNAME }}
      #     jreleaser.deploy.maven.nexus2.sonatypeSnapshots.username=${{ secrets.CENTRAL_SONATYPE_USERNAME }}
      #     jreleaser.nexus2.username=${{ secrets.CENTRAL_SONATYPE_USERNAME }}
      #     EOF
      #   shell: bash

      # Run JReleaser to upload the staged artifacts created above.
      - name: JReleaser full release
        uses: jreleaser/release-action@2.4.2
        with:
          version: '1.19.0'
          arguments: >
            full-release
            --git-root-search
          setup-java: false
          java-opts: "-Ddeploy.maven.nexus2.sonatypeSnapshots.username=${{ secrets.CENTRAL_SONATYPE_USERNAME }}"
        env:
          # Sonatype (Maven Central) credentials
          CENTRAL_SONATYPE_USERNAME: ${{ secrets.CENTRAL_SONATYPE_USERNAME }}
          CENTRAL_SONATYPE_TOKEN: ${{ secrets.CENTRAL_SONATYPE_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_KEYNAME: ${{ secrets.GPG_KEY_ID }}
          # The project/version information written by Gradle into $GITHUB_ENV
          JRELEASER_PROJECT_VERSION: ${{ env.JRELEASER_PROJECT_VERSION }}
          JRELEASER_PROJECT_JAVA_GROUP_ID: ${{ env.JRELEASER_PROJECT_JAVA_GROUPID }}
        
      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties