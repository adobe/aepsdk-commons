#
# Copyright 2024 Adobe. All rights reserved.
# This file is licensed to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
# OF ANY KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#

name: (Reusable) Publish Release (Android)

# Workflow requirements:
#  
# This workflow relies on the following secrets:
# - GITHUB_TOKEN: With the permission scope: `contents: write`. Required for creating a release on GitHub.
# - GPG_SECRET_KEYS
# - GPG_OWNERTRUST
# - CENTRAL_SONATYPE_USERNAME
# - CENTRAL_SONATYPE_TOKEN
# - GOOGLE_TOKEN
# These can be passed using the `secrets: inherit` option in the caller workflow file.
#
# The workflow also requires that the `ci-publish`/`<variant>-publish-main` rule writes the following JReleaser
# environment variables to $GITHUB_ENV:
# - JRELEASER_PROJECT_VERSION: the version of the project
# - JRELEASER_PROJECT_JAVA_GROUP_ID: the group ID of the project

on: 
  workflow_call:
    inputs:
      tag:
        description: |
          The tag (version) to be released (ex: 1.2.3). The workflow will automatically prepend the "v" prefix, resulting in a tag like "v1.2.3".
        type: string
        required: true

      create-github-release:
        description: |
          Boolean flag that determines whether to create a GitHub release. If the specified `tag` does not exist, it will be created.
        type: boolean
        required: true
        default: true

      release-variant:
        description: | 
          The variant used to control the GitHub release title suffix and Maven publish command (ex: core -> v3.2.1-core & make core-publish-main). 
          If not specified, uses the default values for both.
        type: string
        default: ''

      version-validation-name:
        description: |
          '(Optional) The name of the extension. Required if any regex patterns use a template that depends on the extension name. (ex: Lifecycle).'
        type: string
        default: ''

      version-validation-paths:
        description: |
          A comma-separated list of absolute and/or relative file paths to validate. 
          Each path can optionally specify a pattern type using the syntax:
          
          **Syntax:** `path[:file_type]`

          **Example:**
          `"code/edge/src/main/java/com/adobe/marketing/mobile/EdgeConstants.java, code/gradle.properties"`
        type: string
        default: ''

      version-validation-dependencies:
        description: |
          A comma-separated list of dependencies with their versions. 
          Each dependency can optionally specify a semicolon-separated list of the file paths where it applies using the `@` symbol.
          
          **Syntax:** `<name> <version>[@file_path1[:pattern_type][;file_path2[:pattern_type];...]]`

          - If the `@` syntax is used, the paths provided in the `-p` argument will be overridden, and the dependency will only be applied to the specified files.
          - When specifying custom file paths, you must provide either an absolute or relative path to each file.
          - If a dependency is missing a version, it will be skipped.
          - `<name>` does not have to be regex-escaped, this is handled automatically.

          **Example:**
          `"Core 7.8.9, EdgeIdentity 8.9.10@code/gradle.properties;code/Constants.kt:test_version"`
        type: string
        default: ''

      staging-dir:
        description: |
          The path (workspace relative or absolute) to the artifact staging directory that JReleaser should upload.
          Ex: "code/assurance/build/staging-deploy"
        required: true
        type: string

      ref:
        description: |
          The git reference (branch, tag, or SHA) to check out when publishing the release.
          Defaults to 'main'.
        required: false
        type: string
        default: 'main'

jobs:
  validate-versions:
    name: Validate Versions
    uses: adobe/aepsdk-commons/.github/workflows/versions.yml@gha-android-3.4.3
    with:
      name: ${{ inputs.version-validation-name }}
      version: ${{ github.event.inputs.tag }}
      branch: ${{ inputs.ref }}
      paths: ${{ inputs.version-validation-paths }}
      dependencies: ${{ inputs.version-validation-dependencies }}
      update: false

  publish:
    runs-on: ubuntu-24.04
    needs: validate-versions
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Java
        uses: actions/setup-java@v4.7.0
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Cache Gradle packages
        uses: actions/cache@v4.2.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Compute Final Tag
        run: |
          FINAL_TAG="v${{ inputs.tag }}"

          if [ -n "${{ inputs.release-variant }}" ]; then
            FINAL_TAG="${FINAL_TAG}-${{ inputs.release-variant }}"
          fi

          echo "FINAL_TAG=$FINAL_TAG" >> $GITHUB_ENV

      - name: Create GitHub release
        if: ${{ inputs.create-github-release }}
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$FINAL_TAG" \
            --generate-notes \
            --title "$FINAL_TAG"

      - name: Import GPG key
        env:
          GPG_SECRET_KEYS: ${{ secrets.GPG_SECRET_KEYS }}
          GPG_OWNERTRUST: ${{ secrets.GPG_OWNERTRUST }}
        run: |
          # Check if the tag exists in the remote repository
          if [ -z "$(git ls-remote --tags origin refs/tags/$FINAL_TAG)" ]; then
              echo "::error title=Missing tag for publishing Pods::Tag '$FINAL_TAG' does not exist in the remote repository."
              exit 1
          else
              echo "Tag '$FINAL_TAG' exists in the remote repository."
          fi

          echo $GPG_SECRET_KEYS | base64 --decode | gpg --import --no-tty --batch --yes
          echo $GPG_OWNERTRUST | base64 --decode | gpg --import-ownertrust --no-tty --batch --yes

      - name: Generate artifacts (local staging)
        env:
          GOOGLE_TOKEN: ${{ secrets.GOOGLE_TOKEN }}
        run: |
          if [ -n "${{ inputs.release-variant }}" ]; then
            make "${{ inputs.release-variant }}-publish-main"
          else
            make ci-publish
          fi

      - name: Generate JReleaser configuration
        uses: adobe/aepsdk-commons/.github/actions/android-setup-jreleaser-configuration@gha-android-3.4.3
        with:
          staging-dir: ${{ inputs.staging-dir }}

      # Use JReleaser to upload staged artifacts and complete the release.
      - name: JReleaser deploy to Maven Central
        uses: jreleaser/release-action@2.4.2
        with:
          version: '1.19.0'
          arguments: >
            full-release
            --git-root-search
          setup-java: false
        env:
          # The JReleaser expected username and password env var format follows:
          # JRELEASER_DEPLOY_MAVEN_<deployerType>_<deployerName>_USERNAME
          # In this case:
          # - deployerType is the MavenCentral deployer provided by JReleaser (turns into "MAVENCENTRAL")
          # - deployerName is the custom name of the deployer (defined in the jreleaser.yml file, gradle, etc.) (turns into "SONATYPE")
          JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.CENTRAL_SONATYPE_USERNAME }}
          JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_SONATYPE_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_KEYNAME: ${{ secrets.GPG_KEY_ID }}
          # The project/version information written by Gradle into $GITHUB_ENV
          JRELEASER_PROJECT_VERSION: ${{ env.JRELEASER_PROJECT_VERSION }}
          JRELEASER_PROJECT_JAVA_GROUP_ID: ${{ env.JRELEASER_PROJECT_JAVA_GROUP_ID }}
          JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_SONATYPE_NAMESPACE: ${{ env.JRELEASER_PROJECT_JAVA_GROUP_ID }}

      - name: Save JReleaser logs
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties