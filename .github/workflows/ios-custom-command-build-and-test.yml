#
# Copyright 2024 Adobe. All rights reserved.
# This file is licensed to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
# OF ANY KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#

name: z(Reusable) Custom Command Build and Test (iOS)

on:
  workflow_call:
    inputs:
      ios-device-names:
        description: |
          The iOS device names to use for testing. Must be formatted as a valid JSON array string.
          Example: '["iPhone 15", "iPhone 15 Pro"]'
            - Notice the use of single quotes to wrap the JSON array string, and double quotes for each array element.
        type: string
        default: ''
      ios-versions:
        description: |
          The iOS versions to use for testing. Must be formatted as a valid JSON array string.
          Example: '["18.0", "18.1"]'
            - Notice the use of single quotes to wrap the JSON array string, and double quotes for each array element.
        type: string
        default: ''
      tvos-device-names:
        description: |
          The tvOS device names to use for testing. Must be formatted as a valid JSON array string.
          Example: '["Apple TV 4K (3rd generation)", "Apple TV"]'
            - Notice the use of single quotes to wrap the JSON array string, and double quotes for each array element.
        type: string
        default: ''
      tvos-versions:
        description: |
          The tvOS versions to use for testing. Must be formatted as a valid JSON array string.
          Example: '["18.0", "18.1"]'
            - Notice the use of single quotes to wrap the JSON array string, and double quotes for each array element.
        type: string
        default: ''
      command:
        type: string
        required: true
      result-bundle-path:
        description: 'The path to the xcresult bundle.'
        type: string
        default: ''
      enable-codecov:
        description: 'Enable Codecov for test coverage.'
        type: boolean
        default: false
      codecov-flag:
        description: 'The flag to pass to the codecov uploader.'
        type: string
        default: ''
      xcode-version:
        description: "The version of Xcode to use. If not provided, the runner's default version will be used."
        type: string
        default: ''

jobs:
  define-matrix:
    name: Setup Configuration
    runs-on: ubuntu-24.04
    outputs:
      ios-device-names: ${{ steps.define-matrix.outputs.ios-device-names }}
      ios-versions: ${{ steps.define-matrix.outputs.ios-versions }}
      tvos-device-names: ${{ steps.define-matrix.outputs.tvos-device-names }}
      tvos-versions: ${{ steps.define-matrix.outputs.tvos-versions }}
      is-default-ios-device: ${{ steps.define-matrix.outputs.is-default-ios-device }}
      is-default-ios: ${{ steps.define-matrix.outputs.is-default-ios }}
      is-default-tvos-device: ${{ steps.define-matrix.outputs.is-default-tvos-device }}
      is-default-tvos: ${{ steps.define-matrix.outputs.is-default-tvos }}
      friendly-command-name: ${{ steps.define-matrix.outputs.friendly-command-name }}
    steps:
      - name: Define Matrix
        id: define-matrix
        shell: bash
        run: |
          # Set default values
          default_ios_device_names='["iPhone 15"]'
          default_ios_versions='["18.1"]'
          default_tvos_device_names='["Apple TV"]'
          default_tvos_versions='["18.1"]'

          # Get inputs
          ios_device_names='${{ inputs.ios-device-names }}'
          ios_versions='${{ inputs.ios-versions }}'
          tvos_device_names='${{ inputs.tvos-device-names }}'
          tvos_versions='${{ inputs.tvos-versions }}'
          command="${{ inputs.command }}"

          # Check and set default values
          if [ -z "$ios_device_names" ]; then
            ios_device_names="$default_ios_device_names"
            is_default_ios_device='true'
          else
            is_default_ios_device='false'
          fi

          if [ -z "$ios_versions" ]; then
            ios_versions="$default_ios_versions"
            is_default_ios='true'
          else
            is_default_ios='false'
          fi

          if [ -z "$tvos_device_names" ]; then
            tvos_device_names="$default_tvos_device_names"
            is_default_tvos_device='true'
          else
            is_default_tvos_device='false'
          fi

          if [ -z "$tvos_versions" ]; then
            tvos_versions="$default_tvos_versions"
            is_default_tvos='true'
          else
            is_default_tvos='false'
          fi

          # Extract first two words from command
          friendly_command_name=$(echo "$command" | awk '{print $1, $2}')
          word_count=$(echo "$command" | wc -w)

          # Append ellipsis if more than two words
          if [ "$word_count" -gt 2 ]; then
            friendly_command_name="$friendly_command_name..."
          fi

          # Echo values for visibility
          echo "ios-device-names: $ios_device_names"
          echo "ios-versions: $ios_versions"
          echo "tvos-device-names: $tvos_device_names"
          echo "tvos-versions: $tvos_versions"
          echo "is-default-ios-device: $is_default_ios_device"
          echo "is-default-ios: $is_default_ios"
          echo "is-default-tvos-device: $is_default_tvos_device"
          echo "is-default-tvos: $is_default_tvos"
          echo "friendly-command-name: $friendly_command_name"

          # Set outputs
          echo "ios-device-names=$ios_device_names" >> "$GITHUB_OUTPUT"
          echo "ios-versions=$ios_versions" >> "$GITHUB_OUTPUT"
          echo "tvos-device-names=$tvos_device_names" >> "$GITHUB_OUTPUT"
          echo "tvos-versions=$tvos_versions" >> "$GITHUB_OUTPUT"

          echo "is-default-ios-device=$is_default_ios_device" >> "$GITHUB_OUTPUT"
          echo "is-default-ios=$is_default_ios" >> "$GITHUB_OUTPUT"
          echo "is-default-tvos-device=$is_default_tvos_device" >> "$GITHUB_OUTPUT"
          echo "is-default-tvos=$is_default_tvos" >> "$GITHUB_OUTPUT"
          echo "friendly-command-name=$friendly_command_name" >> "$GITHUB_OUTPUT"
  run-custom-command:
    name: >
      Running `${{ needs.define-matrix.outputs.friendly-command-name }}` using 
      ${{ needs.define-matrix.outputs.is-default-ios-device != 'true' && matrix.ios-device || '' }}
      ${{ needs.define-matrix.outputs.is-default-ios != 'true' && matrix.ios || '' }}
      ${{ needs.define-matrix.outputs.is-default-tvos-device != 'true' && matrix.tvos-device || '' }}
      ${{ needs.define-matrix.outputs.is-default-tvos != 'true' && matrix.tvos || '' }}
    runs-on: macos-14
    needs: define-matrix
    strategy:
      max-parallel: 1
      matrix:
        ios-device: ${{ fromJson(needs.define-matrix.outputs.ios-device-names) }}
        ios: ${{ fromJson(needs.define-matrix.outputs.ios-versions) }}
        tvos-device: ${{ fromJson(needs.define-matrix.outputs.tvos-device-names) }}
        tvos: ${{ fromJson(needs.define-matrix.outputs.tvos-versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Setup dependencies
        uses: adobe/aepsdk-commons/.github/actions/ios-setup-dependencies-action@gha-ios-5.3.3
        with:
          xcode-version: ${{ inputs.xcode-version }}

      - name: Run command
        run: ${{ inputs.command }} IOS_DEVICE_NAME="${{ matrix.ios-device }}" IOS_VERSION="${{ matrix.ios }}" TVOS_DEVICE_NAME="${{ matrix.tvos-device }}" TVOS_VERSION="${{ matrix.tvos }}"

      - name: Set up xcresultparser tool
        if: ${{ always() && inputs.result-bundle-path != '' }}
        continue-on-error: true
        run: |
          brew install xcresultparser
      
      - name: Parse xcresult files
        if: ${{ always() && inputs.result-bundle-path != '' }}
        continue-on-error: true
        run: |
          mkdir -p ./build/coverage
          
          # Check if the result-bundle-path is a directory or file
          if [ -d "${{ inputs.result-bundle-path }}" ]; then
            echo "Provided path is a directory. Searching for .xcresult files..."
            
            # Find all .xcresult files in the directory
            RESULT_FILES=$(find "${{ inputs.result-bundle-path }}" -name "*.xcresult")
            
            echo "Found .xcresult files: $RESULT_FILES"

            # Check RESULT_FILES is not empty
            if [ -z "$RESULT_FILES" ]; then
              echo "No .xcresult files found in the directory. Exiting."
              exit 0
            fi

            # If multiple .xcresult files are found, merge them into a single xcresult
            COUNT=$(echo "$RESULT_FILES" | wc -w)
            if [ "$COUNT" -gt 1 ]; then
              echo "Multiple .xcresult files detected. Merging coverage..."
              
              # Construct merge command
              MERGE_CMD="xcrun xccov merge --output ./build/Merged.xcresult"
              for f in $RESULT_FILES; do
                MERGE_CMD="$MERGE_CMD $f"
              done
              
              echo "Final MERGE_CMD: $MERGE_CMD"

              # Execute merge
              eval "$MERGE_CMD"
              
              # Parse merged file
              xcresultparser --output-format cobertura "./build/Merged.xcresult" > ./build/coverage/coverage.xml
            else
              # Parse single file
              echo "Single .xcresult file found. Parsing..."
              xcresultparser --output-format cobertura "$RESULT_FILES" > ./build/coverage/coverage.xml
            fi
          else
            echo "Provided path is a file. Parsing..."
            xcresultparser --output-format cobertura "${{ inputs.result-bundle-path }}" > ./build/coverage/coverage.xml
          fi

      - name: Upload code coverage
        if: ${{ always() && inputs.enable-codecov }}
        continue-on-error: true
        uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # v5.3.1
        with:
          directory: ./build/coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ inputs.codecov-flag }}
          verbose: true
